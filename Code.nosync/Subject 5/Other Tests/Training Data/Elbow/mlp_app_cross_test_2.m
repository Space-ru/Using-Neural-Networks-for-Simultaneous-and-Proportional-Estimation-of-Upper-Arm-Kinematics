% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created Tue Feb 02 14:23:59 CET 2016
%
close all;
clear all;
load('CV.mat');

trialnumber = 1;
offset = 1;
filename1 = 'FeaturesTrial5.mat';
filename2 = 'FeaturesTrial6.mat';
for trialnumber = 1:6
 if trialnumber == 1
    net = setwb(net,weights(:,1));
elseif trialnumber == 2
    net = setwb(net,weights(:,2));
elseif trialnumber == 3
    net = setwb(net,weights(:,3));
elseif trialnumber == 4
    net = setwb(net,weights(:,4));
elseif trialnumber == 5
    net = setwb(net,weights(:,5));
elseif trialnumber == 6
    net = setwb(net,weights(:,6));
elseif trialnumber == 7
    net = setwb(net,weights(:,7));
elseif trialnumber == 8
    net = setwb(net,weights(:,8));
elseif trialnumber == 9
    net = setwb(net,weights(:,9));
elseif trialnumber == 10
    net = setwb(net,weights(:,10));
elseif trialnumber == 11
    net = setwb(net,weights(:,11));
elseif trialnumber == 12
    net = setwb(net,weights(:,12));
elseif trialnumber == 13
    net = setwb(net,weights(:,13));
elseif trialnumber == 14
    net = setwb(net,weights(:,14));
elseif trialnumber == 15
    net = setwb(net,weights(:,15));
elseif trialnumber == 16
    net = setwb(net,weights(:,16));
elseif trialnumber == 17
    net = setwb(net,weights(:,17));
elseif trialnumber == 18
    net = setwb(net,weights(:,18));
elseif trialnumber == 19
    net = setwb(net,weights(:,19));
elseif trialnumber == 20
    net = setwb(net,weights(:,20));
end

data = importdata(filename1);
target = data.data(101:4100,1)';
RMS = data.data(101:4100,3)';
RMS_t = data.data((101:4100),9)';

data2 = importdata(filename2);
target2 = data2.data(101:4100,1)';
RMS2 = data2.data(101:4100,3)';
RMS_t2 = data2.data((101:4100),9)';

N = length(target)*2;
T1 = (1:N)/100;

input = [RMS RMS2; RMS_t RMS_t2];
x = input;
t = [target target2];
%t = [target target2 target3 target4];

% Test the Network
y = net(x);
e = gsubtract(t,y);
p = perform(net,t,y);
rmse_train = sqrt(p);

% % View the Network
 %view(net)

 figure, plot(T1,t, T1,y);
 xlabel('Time (seconds)');
 ylabel('Elbow Joint Angle (degrees)');
 h = legend('actual angle','estimated angle',2);
 set(h,'Location','SouthEast')

 %% CC - correlation coefficient : Training
y_mn_train = mean(y);
t_mn_train = mean(t);

for(n=1:N)
   num_train(n) = (y(n)-y_mn_train)*(t(n)-t_mn_train);
   den1_train(n) = (y(n)-y_mn_train)^2;
   den2_train(n) = (t(n)-t_mn_train)^2;
end

%% R square value - : Training
for(n=1:N)
    den_R2(n) = (y(n) - mean(y));
end

R2 = 1 - (p/mean(den_R2.^2));

numerator_train = sum(num_train);
denominator_train = sqrt(sum(den1_train)*sum(den2_train));
CC_train = numerator_train/denominator_train;


Rows = {'1';'2';'3';'4';'5';'6';'Mean';'SD'};
 rmsetrain(trialnumber) = rmse_train;
 CCtrain(trialnumber) = CC_train;
 R2train(trialnumber) = R2;

end

%% Analysis of results in a table
 rmse_train_mean = mean(rmsetrain); %Calculate mean
 CC_train_mean = mean(CCtrain);
 R2_train_mean = mean(R2train);
 
 rmse_train_std = std(rmsetrain); % Calculate stdeviation
 CC_train_std = std(CCtrain);
 R2_train_std = std(R2train);

 rmsetrain1 = [rmsetrain rmse_train_mean rmse_train_std]; % Append Mean and Stdeviation
 CCtrain1 = [CCtrain CC_train_mean CC_train_std];
 R2train1 = [R2train R2_train_mean R2_train_std];
 
T = table(rmsetrain1',CCtrain1',R2train1','VariableNames',{'RMSE' 'CC' 'R2'},'RowNames',Rows)

